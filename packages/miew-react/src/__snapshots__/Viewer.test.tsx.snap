// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Viewer component should apply custom theme when theme prop is provided 1`] = `
.emotion-0 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-0>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-0>.atom-info {
  color: #fcf8f8;
}

<div>
  <div
    class="emotion-0"
  />
</div>
`;

exports[`Viewer component should contain Control panel, if "custom" mode prop is provided 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  width: 100%;
  background-color: #8e4343;
  z-index: 10;
  height: 40px;
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-2 {
  color: #C0C0C0;
}

.emotion-4 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-4>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-4>.atom-info {
  color: #fcf8f8;
}

<div>
  <div
    class="emotion-0"
  >
    <div
      class="emotion-1"
    />
    <span
      class="emotion-2"
    />
    <div
      class="emotion-1"
    />
  </div>
  <div
    class="emotion-4"
  />
</div>
`;

exports[`Viewer component should contain Control panel, if "default" mode prop is provided 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  width: 100%;
  background-color: #8e4343;
  z-index: 10;
  height: 40px;
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-2 {
  color: #C0C0C0;
}

.emotion-4 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-4>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-4>.atom-info {
  color: #fcf8f8;
}

<div>
  <div
    class="emotion-0"
  >
    <div
      class="emotion-1"
    />
    <span
      class="emotion-2"
    />
    <div
      class="emotion-1"
    />
  </div>
  <div
    class="emotion-4"
  />
</div>
`;

exports[`Viewer component should not contain Control panel, if "minimal" mode prop is provided 1`] = `
.emotion-0 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-0>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-0>.atom-info {
  color: #fcf8f8;
}

<div>
  <div
    class="emotion-0"
  />
</div>
`;

exports[`Viewer component should not contain Control panel, if no mode prop is provided 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": .emotion-0 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-0>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-0>.atom-info {
  color: #fcf8f8;
}

<body>
    <div>
      <div
        class="emotion-0"
      />
    </div>
  </body>,
  "container": .emotion-0 {
  background-color: #f00;
  height: 100%;
  width: 100%;
}

.emotion-0>.miew-canvas {
  height: 100%;
  width: 100%;
}

.emotion-0>.atom-info {
  color: #fcf8f8;
}

<div>
    <div
      class="emotion-0"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
